#!/usr/bin/env node
const fs = require('fs');
const colors = require('colors');
const inquirer = require('inquirer');
const msgFile = process.argv[2];
const headerReg = /^(feat|fix|style):/;
const mergeRge = /^Merge branch/;
const errOptions = [
  "1. 强制提交",
  "2. 重新输入 msg",
  "3. 给 msg 加上标识前缀",
  "4. 退出"
];
const prefixOptions = [
  "feat:     →   A new feature ",
  "fix:      →   A bug fix ",
  "style:    →   Changes that do not affect the meaning of code "
]
let msgChange = false; // 标记 msg 有没有被修改过

// 读取 msgFile
let getMsg = function() {
  return new Promise((resolve, reject) => {
    fs.readFile(msgFile, 'utf8', (err, data) => {
      if (err) reject(err);
      else resolve(data);
    })
  })
}

// 写入 msgFile
let writeMsg = function(msg) {
  return new Promise((resolve, reject) => {
    fs.writeFile(msgFile, msg, 'utf8', (err) => {
      if (err) reject(err);
      else resolve();
    })
  })
}

// 输入 msg 字符串
let inputMsg = function() {
  let inputPrompt = {
    type: 'input',
    message: '重新输入 msg: ',
    name: 'msg',
  };
  return inquirer.prompt(inputPrompt).then(answers => answers.msg);
}

// 给 msg 加入前缀
let addMsgPrefix = async function(msg) {
  let prefixPrompt = {
    type: 'list',
    name: 'choose',
    choices: prefixOptions,
    message: "选择你要添加的 msg 前缀: "
  };
  return await inquirer.prompt(prefixPrompt).then(answer => `${answer.choose.split(":")[0]}: ${msg}`);
}

// 校验 commit-msg
let testMsg = async function(msg) {
  let res = 0;
  if (headerReg.test(msg)) {
    console.log(colors.green(`Success: msg-"${msg.replace(/[\r\n]/g,'')}" 校验通过 `));
    if (msgChange) await writeMsg(msg + '\n');
  } else {
    let errPrompt = {
      type: 'list',
      name: 'choose',
      choices: errOptions,
      message: colors.red(`Error: msg-"${msg.replace(/[\r\n]/g,'')}" 不符合规范，msg 必须以 ( feat: | fix: | style: ) 开头，请选择以下操作以继续: `)
    };
    let index = await inquirer.prompt(errPrompt).then(answer => errOptions.indexOf(answer.choose));
    switch(index) {
      case 0:
        res = 0;
        break;
      case 1:
        msgChange = true;
        res = await testMsg(await inputMsg());
        break;
      case 2:
        msgChange = true;
        res = await testMsg(await addMsgPrefix(msg));
        break;
      default:
        res = 1;
        break;
    };
  }
  return res;
}

async function main() {
  let msg = await getMsg();
  if (mergeRge.test(msg)) process.exit(0); // 如果是 merge 产生的 msg，不校验
  let res = await testMsg(msg);
  process.exit(res);
}

main().catch(err => {
  console.log(colors.red("Error: commit-msg hook 执行失败，请联系 bolewang "));
  process.exit(1);
});










